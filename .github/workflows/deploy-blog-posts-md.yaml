name: Deploy Blog Posts Markdown to Supabase Storage

on:
  push:
    branches:
      - main
    # paths:
    #   - 'src/lib/posts/**/*.md'
  workflow_dispatch:

jobs:
  upload-blog-posts-md:
    name: Upload Blog Posts Markdown to Supabase Storage
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install -g @supabase/supabase-js

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::319829039858:role/github-action-read-ssm-secrets
          aws-region: ap-southeast-2  # or any region you use

      - name: Run AWS CLI command
        run: aws sts get-caller-identity

      - name: Get SSM Parameters
        id: ssm-params
        run: |
          # Fetch SSM parameters and set them as environment variables
          echo "Fetching SSM parameters..."
          
          # Get Supabase URL from SSM
          SUPABASE_URL=$(aws ssm get-parameter --name "/supabase/url" --with-decryption --query "Parameter.Value" --output text)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve Supabase URL from SSM"
            exit 1
          fi
          echo "supabase_url=$SUPABASE_URL" >> $GITHUB_OUTPUT

          # Get Supabase Key from SSM
          SUPABASE_KEY=$(aws ssm get-parameter --name "/supabase/key" --with-decryption --query "Parameter.Value" --output text)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve Supabase Key from SSM"
            exit 1
          fi
          echo "supabase_key=$SUPABASE_KEY" >> $GITHUB_OUTPUT
          
          echo "SSM parameters retrieved successfully"

      - name: Upload markdown files to Supabase Storage
        env:
          SUPABASE_URL: ${{ steps.ssm-params.outputs.supabase_url }}
          SUPABASE_KEY: ${{ steps.ssm-params.outputs.supabase_key }}
        run: |
          # Create a Node.js script to handle the upload
          cat > upload-script.js << EOF
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          const path = require('path');
          
          const supabaseUrl = process.env.SUPABASE_URL;
          const supabaseKey = process.env.SUPABASE_KEY;
          
          if (!supabaseUrl || !supabaseKey) {
            console.error('Missing Supabase credentials');
            process.exit(1);
          }
          
          const supabase = createClient(supabaseUrl, supabaseKey);
          
          async function uploadMarkdownFiles() {
            const postsDir = 'src/lib/posts';
            
            try {
              // Read all markdown files from the posts directory
              const files = fs.readdirSync(postsDir).filter(file => file.endsWith('.md'));
              
              console.log(\`Found \${files.length} markdown files to upload\`);
              
              for (const file of files) {
                const filePath = path.join(postsDir, file);
                const fileContent = fs.readFileSync(filePath, 'utf8');
                
                console.log(\`Uploading \${file}...\`);
                
                try {
                  // Upload file content to Supabase Storage
                  const { data, error } = await supabase.storage
                    .from('blog-posts')
                    .upload(file, fileContent, {
                      contentType: 'text/markdown',
                      upsert: true
                    });
                  
                  if (error) {
                    console.error(\`Error uploading \${file}:\`, error);
                  } else {
                    console.log(\`Successfully uploaded \${file}\`);
                  }
                } catch (uploadError) {
                  console.error(\`Failed to upload \${file}:\`, uploadError);
                }
              }
              
              console.log('Upload process completed');
            } catch (error) {
              console.error('Error reading posts directory:', error);
              process.exit(1);
            }
          }
          
          uploadMarkdownFiles();
          EOF
          
          # Run the upload script
          node upload-script.js

      - name: Verify upload
        env:
          SUPABASE_URL: ${{ steps.ssm-params.outputs.supabase_url }}
          SUPABASE_KEY: ${{ steps.ssm-params.outputs.supabase_key }}
        run: |
          echo "Verifying uploaded files..."
          curl -X GET \
            -H "apikey: $SUPABASE_KEY" \
            "$SUPABASE_URL/storage/v1/object/list/blog-posts" | jq '.'
