name: Deploy Blog Posts Markdown to Supabase Storage

on:
  push:
    branches:
      - main
    paths:
      - 'src/lib/posts/**/*.md'
  workflow_dispatch:

jobs:
  upload-blog-posts-md:
    name: Upload Blog Posts Markdown to Supabase Storage
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need at least 2 commits to compare changes

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @supabase/supabase-js

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed markdown files in src/lib/posts
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # If manually triggered, upload all files
            echo "Manual trigger - uploading all files"
            CHANGED_FILES=$(find src/lib/posts -name "*.md" -type f | tr '\n' ' ')
          else
            # Get changed files between current and previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^src/lib/posts/.*\.md$" | tr '\n' ' ')
          fi
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No markdown files changed in src/lib/posts"
            echo "changed_files=" >> $GITHUB_OUTPUT
          else
            echo "Changed files: $CHANGED_FILES"
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::319829039858:role/github-action-read-ssm-secrets
          aws-region: ap-southeast-2  # or any region you use

      - name: Run AWS CLI command
        run: aws sts get-caller-identity

      - name: Get SSM Parameters
        id: ssm-params
        run: |
          # Fetch SSM parameters and set them as environment variables
          echo "Fetching SSM parameters..."
          
          # Get Supabase URL from SSM
          SUPABASE_URL=$(aws ssm get-parameter --name "/supabase/url" --with-decryption --query "Parameter.Value" --output text)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve Supabase URL from SSM"
            exit 1
          fi
          echo "supabase_url=$SUPABASE_URL" >> $GITHUB_OUTPUT

          # Get Supabase Key from SSM
          SUPABASE_KEY=$(aws ssm get-parameter --name "/supabase/key" --with-decryption --query "Parameter.Value" --output text)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve Supabase Key from SSM"
            exit 1
          fi
          echo "supabase_key=$SUPABASE_KEY" >> $GITHUB_OUTPUT
          
          echo "SSM parameters retrieved successfully"

      - name: Upload changed markdown files to Supabase Storage
        if: steps.changed-files.outputs.changed_files != ''
        env:
          SUPABASE_URL: ${{ steps.ssm-params.outputs.supabase_url }}
          SUPABASE_KEY: ${{ steps.ssm-params.outputs.supabase_key }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
        run: |
          # Create a Node.js script to handle the upload
          cat > upload-script.cjs << EOF
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          const path = require('path');
          
          const supabaseUrl = process.env.SUPABASE_URL;
          const supabaseKey = process.env.SUPABASE_KEY;
          const changedFiles = process.env.CHANGED_FILES ? process.env.CHANGED_FILES.split(' ').filter(f => f.trim()) : [];
          
          if (!supabaseUrl || !supabaseKey) {
            console.error('Missing Supabase credentials');
            process.exit(1);
          }
          
          const supabase = createClient(supabaseUrl, supabaseKey);
          
          async function uploadMarkdownFiles() {
            try {
              if (changedFiles.length === 0) {
                console.log('No files to upload');
                return;
              }
              
              console.log(\`Uploading \${changedFiles.length} changed markdown files\`);
              
              for (const filePath of changedFiles) {
                if (!fs.existsSync(filePath)) {
                  console.log(\`File \${filePath} no longer exists, skipping\`);
                  continue;
                }
                
                const fileName = path.basename(filePath);
                const fileContent = fs.readFileSync(filePath, 'utf8');
                
                console.log(\`Uploading \${fileName}...\`);
                
                try {
                  // Upload file content to Supabase Storage
                  const { data, error } = await supabase.storage
                    .from('blog-posts')
                    .upload(fileName, fileContent, {
                      contentType: 'text/markdown',
                      upsert: true
                    });
                  
                  if (error) {
                    console.error(\`Error uploading \${fileName}:\`, error);
                  } else {
                    console.log(\`Successfully uploaded \${fileName}\`);
                  }
                } catch (uploadError) {
                  console.error(\`Failed to upload \${fileName}:\`, uploadError);
                }
              }
              
              console.log('Upload process completed');
            } catch (error) {
              console.error('Error processing files:', error);
              process.exit(1);
            }
          }
          
          uploadMarkdownFiles();
          EOF
          
          # Run the upload script
          node upload-script.cjs

      - name: Skip upload - no changes
        if: steps.changed-files.outputs.changed_files == ''
        run: |
          echo "No markdown files changed in src/lib/posts"
          echo "Skipping upload process"

      - name: Verify upload
        if: steps.changed-files.outputs.changed_files != ''
        env:
          SUPABASE_URL: ${{ steps.ssm-params.outputs.supabase_url }}
          SUPABASE_KEY: ${{ steps.ssm-params.outputs.supabase_key }}
        run: |
          echo "Verifying uploaded files..."
          curl -X GET \
            -H "apikey: $SUPABASE_KEY" \
            "$SUPABASE_URL/storage/v1/object/list/blog-posts" | jq '.'
